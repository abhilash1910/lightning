name: Test PyTorch - TPU

on:
  push:
    branches: [master, "release/*"]
  pull_request_target:
    branches: [master, "release/*"]
    types: [ opened, reopened, edited, ready_for_review, synchronize ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.head_ref }}
  cancel-in-progress: ${{ ! (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/release/')) }}

defaults:
  run:
    shell: bash

env:
  XLA_VER: '2.0'
  PR_NUMBER: ${{ github.event.pull_request.number && github.event.pull_request.number || 'master' }}
  SHA: ${{ github.event.pull_request.head.sha && github.event.pull_request.head.sha || github.sha }}
  CLOUDSDK_CORE_DISABLE_PROMPTS: 1  # default to --quiet
  # recommended zone for v4-8: https://cloud.google.com/tpu/docs/regions-zones
  CLOUDSDK_COMPUTE_ZONE: us-central2-b  # --zone

jobs:
  test-on-tpus:
    runs-on: ubuntu-22.04
    # run only when the PR title contains 'TPU' or is a merge to master
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/master') ||
      (startsWith(github.event_name, 'pull_request') && ( contains(github.event.pull_request.title, 'TPU'))

    strategy:
      fail-fast: false
      matrix:
        pkg-name: ["fabric", "pytorch"]
        runtime: ["xrt", "pjrt"]
    timeout-minutes: 30

    steps:
    - uses: actions/checkout@v3
      with:
        ref: ${{ github.event.pull_request.head.sha }}

    - uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GKE_SA_KEY_BASE64 }}

    - uses: 'google-github-actions/setup-gcloud@v1'

    - name: Time-based job cleanup
      if: always()
      run: |
        gcloud compute tpus tpu-vm list --format='value(name,createTime)' > data.txt
        cat data.txt

        if [ ! -s "data.txt" ]; then
          echo "No existing jobs"
          exit 0
        fi

        jobs_deleted=false
        while read -r job_name created_at; do
          # Skip jobs with "keepalive" in the name
          if [[ "$job_name" == *"keepalive"* ]]; then
            echo "Skipping $job_name, has keepalive in name"
            continue
          fi

          # Convert the creation time to Unix timestamp
          created_timestamp=$(date -d "${created_at}" +%s)

          # Calculate the difference between the current time and the creation time
          current_timestamp=$(date +%s)
          age=$((current_timestamp - created_timestamp))

          # Check if the age has surpassed a timeout
          if ((age > 35 * 60)); then
            # delete the job
            gcloud compute tpus tpu-vm delete "$job_name" --async
            jobs_deleted=true
          else
            echo "Skipping $job_name, alive for $age seconds"
          fi
        done < data.txt

        if [ "$jobs_deleted" = true ]; then
          sleep 5
          # diagnostics
          gcloud compute tpus tpu-vm list
        fi

    - name: Update script
      env:
        SCOPE: ${{ matrix.pkg-name }}
        RUNTIME: ${{ matrix.runtime }}
      run: |
        import os
        fname = f'tests/tests_{os.getenv("SCOPE")}/run_tpu_tests.sh'
        with open(fname) as fo:
            data = fo.read()
        data = data.replace('{PYTORCH_VERSION}', os.environ["XLA_VER"])
        data = data.replace('{PR_NUMBER}', os.environ["PR_NUMBER"] or "master")
        data = data.replace('{SHA}', os.environ["SHA"])
        data = data.replace('{RUNTIME}', os.environ["RUNTIME"])
        print(data)
        with open(fname, "w") as fw:
            fw.write(data)
      shell: python

    - name: Run tests
      env:
        SCOPE: ${{ matrix.pkg-name }}
        JOB_NAME: ${{ env.PR_NUMBER }}-${{ matrix.pkg-name }}-${{ matrix.runtime }}-${{ env.SHA }}
      run: |
        set -uex

        # create the job
        gcloud compute tpus tpu-vm create "$JOB_NAME" --accelerator-type=v4-8 --version="tpu-vm-v4-pt-$XLA_VER"

        # copy the testing script
        gcloud compute tpus tpu-vm scp "tests/tests_$SCOPE/run_tpu_tests.sh" "$JOB_NAME":~

        # run it
        gcloud compute tpus tpu-vm ssh "$JOB_NAME" --command="cd ~; bash run_tpu_tests.sh"
        exit_code=$?

        # pull out the coverage file
        gcloud compute tpus tpu-vm scp "$JOB_NAME":~/coverage.xml .

        exit $exit_code

    - name: Cleanup job
      if: always()
      env:
        JOB_NAME: ${{ env.PR_NUMBER }}-${{ matrix.pkg-name }}-${{ matrix.runtime }}-${{ env.SHA }}
      run: |
        if ! gcloud compute tpus tpu-vm list | grep -q "$JOB_NAME"; then
          echo "$JOB_NAME wasn't created"
          exit 0
        fi

        # diagnostics
        gcloud compute tpus tpu-vm describe "$JOB_NAME"

        # delete the job
        gcloud compute tpus tpu-vm delete "$JOB_NAME" --async
        sleep 5

        # diagnostics
        gcloud compute tpus tpu-vm list

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      continue-on-error: true
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: coverage.xml
        flags: tpu,pytest
        name: TPU-coverage
        fail_ci_if_error: false
